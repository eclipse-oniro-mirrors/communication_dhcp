# Copyright (C) 2021-2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/communication/dhcp/dhcp.gni")

module_output_path = "dhcp/dhcp_server_test"

config("module_private_config") {
  visibility = [ ":*" ]
  include_dirs = [ "$DHCP_ROOT_DIR/services/dhcp_server/include" ]
}

ohos_unittest("dhcp_server_unittest") {
  module_out_path = module_output_path
  dhcp_hilog_enable = true
  sources = [
    "$DHCP_ROOT_DIR/services/dhcp_server/src/address_utils.cpp",
    "$DHCP_ROOT_DIR/services/dhcp_server/src/common_util.cpp",
    "$DHCP_ROOT_DIR/services/dhcp_server/src/dhcp_address_pool.cpp",
    "$DHCP_ROOT_DIR/services/dhcp_server/src/dhcp_argument.cpp",
    "$DHCP_ROOT_DIR/services/dhcp_server/src/dhcp_binding.cpp",
    "$DHCP_ROOT_DIR/services/dhcp_server/src/dhcp_config.cpp",
    "$DHCP_ROOT_DIR/services/dhcp_server/src/dhcp_dhcpd.cpp",
    "$DHCP_ROOT_DIR/services/dhcp_server/src/dhcp_function.cpp",
    "$DHCP_ROOT_DIR/services/dhcp_server/src/dhcp_option.cpp",
    "$DHCP_ROOT_DIR/services/dhcp_server/src/dhcp_s_server.cpp",
    "$DHCP_ROOT_DIR/services/dhcp_server/src/dhcp_server_callback_proxy.cpp",
    "$DHCP_ROOT_DIR/services/dhcp_server/src/dhcp_server_death_recipient.cpp",
    "$DHCP_ROOT_DIR/services/dhcp_server/src/dhcp_server_service_impl.cpp",
    "$DHCP_ROOT_DIR/services/dhcp_server/src/dhcp_server_stub.cpp",
    "address_utils_test.cpp",
    "common_util_test.cpp",
    "dhcp_address_pool_test.cpp",
    "dhcp_argument_test.cpp",
    "dhcp_binding_test.cpp",
    "dhcp_config_test.cpp",
    "dhcp_dhcpd_test.cpp",
    "dhcp_function_test.cpp",
    "dhcp_message_sim.cpp",
    "dhcp_option_test.cpp",
    "dhcp_s_server_test.cpp",
    "dhcp_server_callback_proxy_test.cpp",
    "dhcp_server_death_recipient_test.cpp",
    "dhcp_server_service_impl_test.cpp",
    "dhcp_server_stub_test.cpp",
    "system_func_mock.cpp",
  ]

  include_dirs = [
    "//third_party/googletest/googlemock/include",
    "$DHCP_ROOT_DIR/frameworks/native/include",
    "$DHCP_ROOT_DIR/frameworks/native/interfaces",
    "$DHCP_ROOT_DIR/frameworks/native/src",
    "$DHCP_ROOT_DIR/frameworks/native/c_adapter/inc",
    "$DHCP_ROOT_DIR/interfaces",
    "$DHCP_ROOT_DIR/interfaces/inner_api",
    "$DHCP_ROOT_DIR/interfaces/inner_api/include",
    "$DHCP_ROOT_DIR/interfaces/kits/c",
    "$DHCP_ROOT_DIR/interfaces/services",
    "$DHCP_ROOT_DIR/services",
    "$DHCP_ROOT_DIR/services/dhcp_server/include",
    "$DHCP_ROOT_DIR/services/dhcp_client/include",
  ]

  cflags = []

  deps = [
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "access_token:libtokenid_sdk",
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_single",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  ldflags = [
    "-fPIC",
    "-Wl,-E",
    "-Wl,-rpath=/vendor/lib64/hw",
    "-Wl,--wrap=open",
    "-Wl,--wrap=close",
    "-Wl,--wrap=write",
    "-Wl,--wrap=read",
    "-Wl,--wrap=socket",
    "-Wl,--wrap=setsockopt",
    "-Wl,--wrap=ioctl",
    "-Wl,--wrap=bind",
    "-Wl,--wrap=listen",
    "-Wl,--wrap=connect",
    "-Wl,--wrap=select",
    "-Wl,--wrap=vfork",
    "-Wl,--wrap=execv",
    "-Wl,--wrap=_exit",
    "-Wl,--wrap=waitpid",
    "-Wl,--wrap=kill",
    "--coverage",
  ]

  configs = [ ":module_private_config" ]

  defines = [
    "DHCP_SEL_WAIT_TIMEOUTS=1",
    "private = public",
    "protected = public",
  ]

  if (dhcp_hilog_enable) {
    external_deps += [ "hilog:libhilog" ]
    defines += [ "DHCP_HILOG_ENABLE" ]
  }

  part_name = "dhcp"
  subsystem_name = "communication"
  testonly = true
}

group("unittest") {
  testonly = true
  deps = [ ":dhcp_server_unittest" ]
}
